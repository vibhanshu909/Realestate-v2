generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int?     @map("__v")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  username            String  @unique
  password            String
  contact             BigInt?
  isAdmin             Boolean @default(false)
  totalReceivedAmount BigInt
  spent               BigInt  @default(0)
  balance             BigInt

  sites   Site[]
  history History[]

  @@map("users")
}

enum HistoryType {
  CREDIT
  DEBIT
}

model History {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int?     @map("__v")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  type    HistoryType
  amount  BigInt
  balance BigInt
  note    String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("histories")
}

model Site {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int?     @map("__v")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  name     String @unique
  location String

  cost               BigInt
  managerSpentAmount BigInt

  total     SitesTotal
  // TODO: Will delete this field in future after testing.
  isDeleted Boolean

  managerId String @db.ObjectId
  manager   User   @relation(fields: [managerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  siteEntries SiteEntry[]

  @@map("sites")
}

model SiteEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int?     @map("__v")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  mistri SiteEntryItem
  labour SiteEntryItem
  eit    SiteEntryItem
  morang SiteEntryItem
  baalu  SiteEntryItem
  githi  SiteEntryItem
  cement SiteEntryItem
  saria  SiteEntryItem
  dust   SiteEntryItem
  other  SiteEntryOtherItem
  other2 SiteEntryOtherItem
  note   String?

  managerSpentAmount BigInt
  total              BigInt

  siteId String @db.ObjectId
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("siteentries")
}

type SiteEntryItem {
  cost     BigInt
  paid     Boolean
  quantity BigInt
}

type SiteEntryOtherItem {
  cost     BigInt
  paid     Boolean
  quantity String?
}

type SiteTotalItem {
  cost     BigInt
  quantity BigInt
}

type SitesTotal {
  mistri SiteTotalItem
  labour SiteTotalItem
  eit    SiteTotalItem
  morang SiteTotalItem
  baalu  SiteTotalItem
  githi  SiteTotalItem
  cement SiteTotalItem
  saria  SiteTotalItem
  dust   SiteTotalItem
  other  BigInt
  other2 BigInt
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  v         Int?     @map("__v")
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date

  activity  String
  arguments Json?
  result    Json?
  username  String

  @@map("activities")
}
